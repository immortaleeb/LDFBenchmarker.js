#!/usr/bin/env node

/* Simple benchmarking application for testing different TPF clients */

var fs = require('fs'),
  LineByLineReader = require('line-by-line'),
  spawn = require('child_process').spawn,
  trackPID = require('./lib/monitor_mod');

var args = process.argv.slice(2);
if (args.length < 2 || args.length > 4 || /^--?h(elp)?$/.test(args[0])) {
  console.log('usage: ./run-tests.js queryFile startFragment [timeout [client=ldf-client]]');
  return process.exit(1);
}

var file = args[0],
  startFragment = args[1],
  timeOut = args[2] || 60000, // default 60s
  node = process.argv[0],
  clientPath = './clients/ldf-client/bin/ldf-client',
  ioSettings = { stdio: ['pipe', 'pipe', 'pipe'] };

var lr = new LineByLineReader(file);

var id = 0;


console.log("file,id,timeFirst(ms),time(ms),resultCount,requestCount,timeOut,cpu(%),memory(B)");

lr.on('error', function (err) {
  // 'err' contains error object
  console.error(err);
});

lr.on('line', function (query) {
  // 'line' contains the current line without the trailing newline character.
  lr.pause();

  id++;
  requestCount = 0;

  // Measurements
  var timeFirst = null,
    time = null,
    resultCount = 0,
    requestCount = 0,
    isTimeOut = false,
    cpu = 0,
    memory = 0,
    steps = 0;

  var start = process.hrtime();

  var client = spawn(node,[clientPath, startFragment, query, '-l', 'INFO'], ioSettings);
  client.stdout.setEncoding('utf8');
  // Log HTTP requests
  client.stderr.on('data', function () {
    requestCount++;
  })

  var to = setTimeout(function () {
    isTimeOut = true;
    client.kill();
  }, timeOut);

  client.stdout.on('data', function (result) {
    try {
      JSON.parse(result);
      if (timeFirst === null)
        timeFirst = process.hrtime(start);

      resultCount++;

    } catch (err) {
      console.error(result, err);
    }
  });

  var tracker = new trackPID(client.pid, 1000, function (result) {
    cpu += result.cpu;
    memory += result.memory;
    steps++;
  });

  client.on('exit', function (code, signal) {
    tracker.stop();
    if (code !== null) {
      var time = process.hrtime(start);
      clearTimeout(to);
      console.log("%s,%d,%d,%d,%d,%d,%s,%d,%d", file, id, timeFirst ? timeFirst[0] * 1000 + (timeFirst[1] / 1000000) : -1, time[0] * 1000 + (time[1] / 1000000), resultCount, requestCount, isTimeOut);
      lr.resume();
    } else {
      console.error(code, signal);
    }
  });
});

lr.on('end', function () {
  // All lines are read, file is closed now.
  console.error('--- End of run ---');
  process.exit(0);
});
